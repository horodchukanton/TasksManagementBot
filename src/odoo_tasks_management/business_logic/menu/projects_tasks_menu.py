import re
from typing import Union

from sqlalchemy import and_, or_
from telebot import types
from telebot.util import quick_markup

from odoo_tasks_management.business_logic.base.operation import Operation, Prompt, PromptMessage
from odoo_tasks_management.business_logic.base.procedure import Procedure
from odoo_tasks_management.messenger.telegram import Bot
from odoo_tasks_management.persistence.db import DB
from odoo_tasks_management.persistence.models import Project, Task


class ProjectsMenu(Procedure):
    def __init__(self, router: 'Router', db: DB, bot: Bot):
        super().__init__(bot)
        self._db = db
        self._router = router
        self._operation = Operation(
            bot=bot,
            prompts=[
                Prompt(
                    message=self.show_projects_list,
                    expects=["text"],
                    handler=self.project_chosen,
                ),
                Prompt(
                    message=self.show_tasks_list,
                    expects=["text"],
                    handler=self.task_chosen,
                ),
                Prompt(
                    message=PromptMessage(
                        buttons=["–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∑–∞–¥–∞—á—É, —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"],
                        text='–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —ñ–∑ –∑–∞–¥–∞—á–µ—é?',
                    ),
                    expects=["text"],
                    handler=self.chosen_process_with_tasks,
                ),
            ]
        )

        self._context = {}

    def show_projects_list(self, operation, chat_id):
        bot = operation.bot
        # –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ –º–∞—Å–∏–≤ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –Ω–∞–∑–≤–æ—é –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ id –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        projects = self._get_projects()
        bot.send_message(chat_id, text='–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—ÇÔ∏è üîΩ')
        # —Ñ–æ—Ä–º—É—î–º–æ markup –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫–∏–π –ø–æ–≤–µ—Ä–Ω–µ —Ñ—É–Ω–∫—Ü—ñ—è self._get_projects(),
        for project in projects:
            project_name = project
            project_id = projects[project]
            markup = quick_markup(
                {project_name: {'callback_data': project_id}},
            )
            bot.send_message(chat_id, text='‚á≤Ô∏è', reply_markup=markup)
        main_menu = types.ReplyKeyboardMarkup()
        row1 = '–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é'
        main_menu.row(row1)
        bot.send_message(
            chat_id,
            text='–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É',
            reply_markup=main_menu
        )
        return

    def _get_projects(self):
        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ id –ø—Ä–æ–µ–∫—Ç—É, –æ—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤
        projects_id = self._db.session().query(Project.id).all()

        # –æ—Ç—Ä–∏–º—É—î–º–æ "—á–∏—Å—Ç–∏–π –º–∞—Å–∏–≤"
        current_projects_id = []
        for id in projects_id:
            current_projects_id.append(id[0])

        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ current_projects_id –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–∑–∞ —Ñ—É–Ω–∫—Ü—ñ—î—é
        self._context['current_projects_id'] = current_projects_id

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ id –ø—Ä–æ–µ–∫—Ç—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ Tasks –∑–∞ —è–∫–∏–º–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ä–∞–Ω–¥–æ–º–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–∏–π id)
        project_id_for_names = self._db.session().query(Task.project_id).filter(
            and_(
                Task.project_id.in_(current_projects_id),
                Task.status != "–í–∏–∫–æ–Ω–∞–Ω–æ",
                Task.status != "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
                or_(
                    Task.assignee == 58,
                    Task.responsible == 58,
                )
            )
        ).distinct().all()

        #–æ—Ç—Ä–∏–º—É—î–º–æ "—á–∏—Å—Ç–∏–π –º–∞—Å–∏–≤"
        task_projects_ids = []
        for id in project_id_for_names:
            task_projects_ids.append(id[0])

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ id –ø—Ä–æ–µ–∫—Ç—É –π–æ–≥–æ –Ω–∞–∑–≤—É –≤ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤, –¥–æ–±–∞–≤–ª—è—î–º–æ –≤ –º–∞—Å–∏–≤
        project_names = self._db.session().query(
            Project.name, Project.id
        ).filter(Project.id.in_(task_projects_ids)).all()

        # —Ñ–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –º–∞—Å–∏–≤–æ–º —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, –¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É, –∑–Ω–∞—á–µ–Ω–Ω—è - –π–æ–≥–æ id
        inline_buttons = {}
        for value in project_names:
            button_name = f"{value[0]}"
            inline_buttons[button_name] = value[1]
        return inline_buttons

    def project_chosen(self, chat_id, message):
        if message.text == "–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é":
            self._router.goto_root_menu(chat_id, self._bot)
            self._operation.is_finished = True
            return
        # –∑–∞–≤–¥—è–∫–∏ –∫–æ–ª–±–µ–∫—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó, –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ id –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        project_id = message.text

        self._context['project_id'] = project_id

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤ —ñ–º'—è –ø—Ä–æ–µ–∫—Ç—É –ø–æ —ñd
        current_project_name = self._db.session().query(Project.name).filter(
            Project.id == project_id).one()[0]
        self._bot.send_message(chat_id,
                               f"–û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: {current_project_name}")
        self._context['project'] = current_project_name

    def show_tasks_list(self, operation, chat_id):
        bot = operation.bot
        current_tasks = self._get_tasks(chat_id)
        bot.send_message(chat_id, text='–û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—ÉÔ∏è üîΩ')
        for task in current_tasks:
            task_id = current_tasks[task]
            task_name = task
            markup = quick_markup(
                {task_name: {'callback_data': task_id}},
            )
            bot.send_message(chat_id, text='‚á≤Ô∏è', reply_markup=markup)

        main_menu = types.ReplyKeyboardMarkup()
        row2 = '–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é'
        main_menu.row(row2)
        bot.send_message(
            chat_id,
            text='–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É',
            reply_markup=main_menu
        )
        return


    def _get_tasks(self, chat_id):
        project_id = self._context['project_id']

        # –≤ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–¥–∞—á –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞ id –ø—Ä–æ–µ–∫—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∏,id —É—Å—ñ—Ö –∑–∞–¥–∞—á, –≤–∏–∫–ª—é—á–µ–Ω–Ω—è: –∑–∞–¥–∞—á—ñ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –í–∏–∫–æ–Ω–∞–Ω–æ —Ç–∞ –°–∫–∞—Å–æ–≤–∞–Ω–æ.
        project_tasks = self._db.session().query(Task.title, Task.id).filter(
            (Task.project_id == project_id) & (
                Task.status != "–í–∏–∫–æ–Ω–∞–Ω–æ") & (
                Task.status != "–°–∫–∞—Å–æ–≤–∞–Ω–æ")).all()

        # —è–∫—â–æ –ø–æ—à—É–∫ –Ω–µ –¥–∞–≤ –Ω—ñ—á–æ–≥–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∑–º—ñ–Ω–Ω—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—ñ
        if not project_tasks:
            self._bot.send_message(
                chat_id, f"–ó–∞ –æ–±—Ä–∞–Ω–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            self._router.goto_root_menu(chat_id, self._bot)
            self._operation.is_finished = True
        # –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
        else:
            # —Ñ–æ—Ä–º—É—î–º–æ"–∫—Ä–∞—Å–∏–≤–∏–π" –º–∞—Å–∏–≤ –∑–∞–¥–∞—á —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–∑–∞ —Ñ—É–Ω–∫—Ü—ñ—î—é
            current_project_tasks = []
            for task in project_tasks:
                current_project_tasks.append(task[0])
            self._context['tasks'] = current_project_tasks

            # —Ñ–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫
            inline_tasks_buttons = {}
            for value in project_tasks:
                button_name = f"{value[0]}"
                inline_tasks_buttons[button_name] = value[1]
            self._context['buttons_tasks'] = inline_tasks_buttons

        return inline_tasks_buttons

    def task_chosen(self, chat_id, message):
        if message.text == "–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é":
            self._router.goto_root_menu(chat_id, self._bot)
            self._operation.is_finished = True
            return

        task_id = message.text
        task_title = self._db.session().query(Task.title).filter(
                Task.id == task_id).one()[0]

        if task_title not in self._context['tasks']:
            self._bot.send_message(
                chat_id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç"
            )
            self._router.goto_root_menu(chat_id, self._bot)

        current_project_id = self._context['project_id']
        task = self._db.session().query(Task).filter(
            and_(
                Task.title == task_title,
                Task.project_id == current_project_id
            )).one()

        task_assignee = task.assignee_user.login
        task_responsible = task.responsible_user.login
        task_deadline = task.deadline
        task_status = task.status
        task_description = self._clean_html_tags(task.description)
        task_planned_hours = task.planned_hours

        self._bot.send_message(
            chat_id,
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á—ñ</b>: {task_title}\n"
            f"<b>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–¥–∞—á—ñ</b>: {task_assignee}\n"
            f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –∑–∞ –∑–∞–¥–∞—á—É</b>: {task_responsible}\n"
            f"<b>–ö—ñ–Ω—Ü–µ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ</b>: {task_deadline}\n"
            f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ</b>: {task_status}\n"
            f"<b>–û–ø–∏—Å –∑–∞–¥–∞—á—ñ</b>: {task_description}\n"
            f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ</b>: {task_planned_hours}",
            parse_mode='HTML'
        )
        self._context['task'] = task_title

    def chosen_process_with_tasks(self, chat_id: Union[int, str], message):
        if message.text == "–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∑–∞–¥–∞—á—É, —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É":
            task_title = self._context['task']
            session = self._db.session()
            task = session.query(Task).filter(
                and_(
                    Task.title == task_title,
                    Task.project_id == self._context['project_id']
                )).one()
            task.status = '–í–∏–∫–æ–Ω–∞–Ω–æ'
            session.flush()
            session.commit()
            self._bot.send_message(chat_id,
                                   f"<b>{task_title}</b> —Å—Ç–∞—Ç—É—Å <b>–í–∏–∫–æ–Ω–∞–Ω–æ</b>",
                                   parse_mode='HTML')

            self._router.goto_root_menu(chat_id, self._bot)

        elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            self._router.goto_root_menu(chat_id, self._bot)

    # def chosen_process_with_projects(self, chat_id):
    #     self._router.goto_root_menu(chat_id, self._bot)
    #     self._operation.is_finished = True

    # def start_create_tasks_menu(self, chat_id: Union[int, str]):
    #     self._router.goto_tasks_for_project_menu(
    #         chat_id,
    #         self._bot,
    #         self._context['project']
    #     )
    @staticmethod
    def _clean_html_tags(description):
        pattern = re.compile('<.*?>')
        return re.sub(pattern, '', description)
