import re
from typing import Union

from sqlalchemy import and_, or_
from telebot import types
from telebot.util import quick_markup

from odoo_tasks_management.business_logic.base.operation import Operation, Prompt, PromptMessage
from odoo_tasks_management.business_logic.base.procedure import Procedure
from odoo_tasks_management.messenger.telegram import Bot
from odoo_tasks_management.persistence.db import DB
from odoo_tasks_management.persistence.models import Project, Task


class CreateTaskMenu(Procedure):
    def __init__(self, router: 'Router', db: DB, bot: Bot):
        super().__init__(bot)
        self._db = db
        self._router = router
        self._operation = Operation(
            bot=bot,
            prompts=[
                Prompt(
                    message=self.show_projects_list,
                    expects=["text"],
                    handler=self.project_chosen,
                ),
                Prompt(
                    message=PromptMessage(
                        text='–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á—ñ',
                    ),
                    expects=["text"],
                    handler=self.title_name,
                ),
                Prompt(
                    message=PromptMessage(
                        text='–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑–∞–¥–∞—á—ñ',
                    ),
                    expects=["text"],
                    handler=self.title_name,
                ),
            ]
        )

        self._context = {}
    def show_projects_list(self, operation, chat_id):
        bot = operation.bot
        projects = self._get_projects()
        bot.send_message(chat_id, text='–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –∑–∞–¥–∞—á—ñÔ∏è üîΩ')

        # —Ñ–æ—Ä–º—É—î–º–æ markup –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫–∏–π –ø–æ–≤–µ—Ä–Ω–µ —Ñ—É–Ω–∫—Ü—ñ—è self._get_projects(),
        for project in projects:
            project_name = project
            project_id = projects[project]
            markup = quick_markup(
                {project_name: {'callback_data': project_id}},
            )
            bot.send_message(chat_id, text='‚á≤Ô∏è', reply_markup=markup)
        return

    def _get_projects(self):
        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ id –ø—Ä–æ–µ–∫—Ç—É, –æ—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤
        projects_id = self._db.session().query(Project.id).all()

        current_projects_id = []
        for id in projects_id:
            current_projects_id.append(id[0])

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç–∏ –∑–∞ —è–∫–∏–º–∏ –ª—é–¥–∏–Ω–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫
        users_project_names_ids_d = self._db.session().query(
            Project.name, Project.id).filter_by(user_id=35).all()


        #–∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—á—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–¥–∞—á –∑–∞ id –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—ñ –Ω–µ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ
        project_id_for_names_task = self._db.session().query(Task.project_id).filter(
            and_(
                Task.project_id.in_(current_projects_id),
                Task.status != "–í–∏–∫–æ–Ω–∞–Ω–æ",
                Task.status != "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
                or_(
                  Task.assignee == 39,
                  Task.responsible == 39,
                )
            )
        ).distinct().all()


        # –æ—Ç—Ä–∏–º—É—î–º–æ "—á–∏—Å—Ç–∏–π –º–∞—Å–∏–≤"
        task_projects_ids = []
        for id in project_id_for_names_task:
            task_projects_ids.append(id[0])

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ id –ø—Ä–æ–µ–∫—Ç—É –π–æ–≥–æ –Ω–∞–∑–≤—É –≤ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤, –¥–æ–±–∞–≤–ª—è—î–º–æ –≤ –º–∞—Å–∏–≤
        project_names_from_tasks = self._db.session().query(
            Project.name, Project.id
        ).filter(Project.id.in_(task_projects_ids)).all()

        merged_list = list(
            set(project_names_from_tasks + users_project_names_ids_d))

        inline_buttons = {}
        for value in merged_list:
            button_name = f"{value[0]}"
            inline_buttons[button_name] = value[1]
        return inline_buttons

    def project_chosen(self, chat_id, message):
        # –∑–∞–≤–¥—è–∫–∏ –∫–æ–ª–±–µ–∫—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó, –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ id –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        project_id = message.text

        self._context['project_id'] = project_id

        # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤ —ñ–º'—è –ø—Ä–æ–µ–∫—Ç—É –ø–æ —ñd
        current_project_name = self._db.session().query(Project.name).filter_by(
            id=project_id).one()[0]
        self._bot.send_message(chat_id,
                               f"–û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: {current_project_name}")
        self._context['project'] = current_project_name

    def title_name(self, chat_id, message):
        title_task = message.text
        self._context['title'] = title_task
        self._bot.send_message(chat_id,
                               f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á—ñ: {title_task}")

    def get_users(self):
        users_id = self._db.session().query(Task.id).all()
